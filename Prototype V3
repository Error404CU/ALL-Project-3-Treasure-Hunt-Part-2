import time
from Tkinter import *
import random
from random import randint
import time
# Window Defining
# Window Defining
window = Tk()
window.title('Treasure Hunt!')
canvas = Canvas(window, width = 1000, height = 600, bg = 'white')
canvas.pack(padx = 0, pady = 0)
# Lines
line1 = canvas.create_line((0, 600, 800, 600),(800, 0, 800, 800),
(800, 600, 1000, 600))
E1= Entry(window, bd=5)
E1.pack(side = RIGHT)
L1 = Label(window, text="Input Time")
L1.pack( side = RIGHT)

#def show_entry_fields():
 #  print("Time Input (seconds): %r" % (E1.get()))
#   for i in range(0, E1.get()):
#       print "hello
#show_entry_fields()
#w = Button(window, text='Enter Time (Seconds)', command=show_entry_fields)
#w.pack(side = RIGHT)
class Robot():
    def __init__(self, x, y, size, colour = "black"):
        self.x = x
        self.y = y
        self.size = size
        self.colour = colour
    def drawRobot(self, canvas):
        self.canvas = canvas
        self.shape = canvas.create_rectangle(self.x, self.y, self.x + self.size, self.y + self.size, fill = self.colour)
    def moveRobot(self, a, b):
        self.a = a
        self.b = b
        self.x += self.a
        self.y += self.b
        self.canvas.coords(self.shape, self.x, self.y, self.x + self.size, self.y + self.size)
        time.sleep(0.025)
        self.canvas.update()

class Treasure():
    def __init__(self, x, y, size, colour = "green"):
        self.x = x
        self.y = y
        self.size = size
        self.colour = colour
    def drawTreasure(self, canvas):
        self.canvas = canvas
        self.shape = canvas.create_rectangle(self.x, self.y, self.x + self.size, self.y + self.size, fill = self.colour)
    def deleteTreasure(self, canvas, shape):
         self.canvas = canvas
         self.shape = shape
         self.canvas.update()

ScoreList  = []
        
def Insertion_Sort(ScoreList):
    #starts at 1 so it can compare an element to the left of it (0)
    for index in range(1,len(ScoreList)):
        Cvalue = ScoreList[index]
        # -1, the element in the list left to the index
        j = index - 1
        while j >= 0:                       # J needs to stay in positive numbers for the sake of this list
            #whatever number is j
            if Cvalue < ScoreList[j]:
                #is to the right of j
                ScoreList[j+1] =ScoreList[j]   #Number in slot J becomes the number in j + 1 (Cvalue)
                ScoreList[j] = Cvalue       #Number in slot J+1 becomes the number in J
                j = j - 1
            else:
                break                       #No swapping needs to occur

x_min = 50
y_min = 50
x_max = 750
y_max = 550

a = 10
b = 10

Robot1 = Robot(100, 100, size=20, colour="black")
Robot1.drawRobot(canvas)

moveList = [10, -10, 10,-10]
TrList = []
ScoreList = []

a = 10
b = 10

CurrentScore = 0
TotalScore = 0


ScoreDraw = canvas.create_text(50,20, text='Robot1 Score: 0')

def Treasure1():
    if(var1.get()):
        var1.set(1)
        global Treasure1
        global TrList
        Treasure1 = Treasure(500,400,size=40,colour="green")
        Treasure1.drawTreasure(canvas)
        TrList.append(Treasure1)
def Treasure2():
    if(var3.get()):
       var3.set(1)
       global Treasure2
       Treasure2 = Treasure(200,500,size=40,colour="green")
       Treasure2.drawTreasure(canvas)
       TrList.append(Treasure2)

def Treasure3():
    if (var4.get()):
        var4.set(1)
        global Treasure3
        Treasure3 = Treasure(700,100,size=40,colour="green")
        Treasure3.drawTreasure(canvas)
        TrList.append(Treasure3)

def Treasure4():
    if (var5.get()):
        var5.set(1)
        global Treasure4
        Treasure4 = Treasure(200,200,size=40,colour="green")
        Treasure4.drawTreasure(canvas)
        TrList.append(Treasure4)
def Treasure5():
    if (var6.get()):
        var6.set(1)
        global Treasure5
        Treasure5= Treasure(100,350,size=40,colour="green")
        Treasure5.drawTreasure(canvas)
        TrList.append(Treasure5)
        

var1=IntVar()
checkbox1 = Checkbutton(window, text='Treasure 1   ', variable=var1, command=Treasure1)
checkbox1.pack(side = LEFT)
var3=IntVar()
checkbox3 = Checkbutton(window, text='Treasure 2   ', variable=var3, command=Treasure2)
checkbox3.pack(side = LEFT)
var4=IntVar()
checkbox4 = Checkbutton(window, text='Treasure 3  ', variable=var4, command=Treasure3)
checkbox4.pack(side = LEFT)
var5=IntVar()
checkbox5  = Checkbutton (window, text='Treasure 4  ', variable=var5, command=Treasure4)
checkbox5.pack(side = LEFT)
var6=IntVar()
checkbox6= Checkbutton(window, text='Treasure 5 ', variable=var6,command=Treasure5)
checkbox6.pack(side = LEFT)

def StartB():
    if(var2.get()):
        var2.set(1)
        for i in range(300):
            global a
            global b
            global score
            global ScoreDraw
            global TotalScore
            global CurrentScore
            global shape
            for j in range(0, len(TrList)):
                    Robot1.moveRobot(a,b)
                    if (Robot1.x >= TrList[j].x -40)and (Robot1.x <=TrList[j].x + 40)\
                       and (Robot1.y >= TrList[j].y -40)and (Robot1.y <= TrList[j].y + 40): # collision detection
                        CurrentScore = randint(1,100)
                        ScoreList.append(CurrentScore)
                        TotalScore = TotalScore + CurrentScore
                        canvas.delete(ScoreDraw)
                        ScoreDraw = canvas.create_text(50,20, text= "Robot1 Score: %r " %TotalScore)
                        a = random.choice(moveList)
                        b =  random.choice(moveList)
                        #TrList[j].deleteTreasure( canvas, shape)
                        print TotalScore
                    if (Robot1.x <= x_min):
                        for r in range(5):
                            a = -a
                            b = -b
                        a= random.choice(moveList)
                        b=random.choice(moveList)
                    elif (Robot1.x >= x_max):
                        for r in range(5):
                            a = -a
                            b = -b                    
                        a= random.choice(moveList)
                        b=random.choice(moveList)
                    elif (Robot1.y <= y_min):
                        for r in range(5):
                            a = -a
                            b = -b                  
                        a= random.choice(moveList)
                        b=random.choice(moveList)
                    elif (Robot1.y >= y_max):
                        for r in range(5):
                            a = -a
                            b = -b              
                        a= random.choice(moveList)
                        b=random.choice(moveList)

        Insertion_Sort(ScoreList)
        print ScoreList
var2 = IntVar()
checkbox2 =Checkbutton(window, text='Start!  ', variable=var2, command =StartB)
checkbox2.pack()
        
window. mainloop()
